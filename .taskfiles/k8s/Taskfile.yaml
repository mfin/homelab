---
version: '3'

vars:
  debugPodTemplate: '{{.ROOT_DIR}}/.taskfiles/k8s/templates/DebugPod.tmpl.yaml'

tasks:
  template:
    desc: Template Helm chart in $app directory
    dir: '{{.dir}}'
    silent: true
    env:
      HELM_SECRETS_IGNORE_MISSING_VALUES: 'true'
    cmds:
      - helm template --dependency-update --include-crds --namespace {{.namespace}} {{.name}} . -f secrets://secrets.yaml {{.CLI_ARGS}}

  apply:
    desc: Apply Helm chart from $app directory
    dir: '{{.dir}}'
    silent: true
    cmds:
      - namespace={{.namespace}} name={{.name}} task k:template | kubectl apply -n {{.namespace}} -f -

  create-namespace:
    desc: Create K8s namespace with name $namespace
    silent: true
    cmds:
      - kubectl create namespace {{.namespace}} --dry-run=client --output=yaml | kubectl apply -f -

  kubeconform:
    desc: Template and kubeconform Helm chart in $app directory
    dir: '{{.dir}}'
    silent: true
    env:
      HELM_SECRETS_IGNORE_MISSING_VALUES: 'true'
    cmds:
      - bash {{.ROOT_DIR}}/.taskfiles/k8s/scripts/kubeconform.sh {{.namespace}} {{.name}}

  clean:
    desc: Clean all the Helm artifacts from $app directory
    dir: '{{.dir}}'
    silent: true
    cmds:
      - fd -I -t d charts --exec rm -rf {}
      - fd -I -g Chart.lock --exec rm -rf {}

  debug:
    desc: Run a debugging pod in the cluster
    dir: '{{.dir}}'
    silent: true
    vars:
      image: '{{.image | default "nicolaka/netshoot"}}'
    env:
      IMAGE: '{{.image}}'
      NAMESPACE: '{{.namespace}}'
    cmds:
      - envsubst < <(cat {{.debugPodTemplate}}) | kubectl apply -f -
      - kubectl wait pods -n {{.namespace}} debug --for condition=Ready --timeout=120s
      - kubectl exec -it -n {{.namespace}} debug -- bash
      - kubectl delete -n {{.namespace}} pod debug
