git:
  public:
    name: homelab
    url: https://github.com/mfin/homelab

secret:
  name: helm-secrets-private-keys
  age:
    key: key.txt

argo-cd:
  global:
    deploymentAnnotations:
      reloader.stakater.com/auto: "true"
    statefulsetAnnotations:
      reloader.stakater.com/auto: "true"
  configs:
    cm:
      exec.enabled: 'true'
      statusbadge.enabled: 'true'
      timeout.reconciliation: 0s
      helm.valuesFileSchemes: >-
        secrets+gpg-import, secrets+gpg-import-kubernetes,
        secrets+age-import, secrets+age-import-kubernetes,
        secrets,secrets+literal,
        https
  server:
    extraArgs:
      - --insecure
    ingress:
      enabled: true
      ingressClassName: internal
      annotations:
        hajimari.io/enable: "true"
        hajimari.io/icon: robot
        hajimari.io/appName: ArgoCD
        hajimari.io/info: Declarative, GitOps continuous delivery tool for Kubernetes
    metrics: &metrics
      enabled: true
      serviceMonitor:
        enabled: true
        annotations:
          argo: stop-reconciling
  dex:
    enabled: false
  controller:
    metrics: *metrics
  repoServer:
    image:
      repository: ghcr.io/mfin/argocd
      tag: 2.9.1@sha256:542d5a8307bb4b8ae948e1dd0904df786b1ddaa9bdffd0b89c08690defa237ac
    metrics: *metrics
    rbac:
    - apiGroups:
      - ""
      resources:
      - secrets
      verbs:
      - get
    volumes:
      - name: helm-secrets-private-keys
        secret:
          secretName: helm-secrets-private-keys

    volumeMounts:
      - mountPath: /helm-secrets-private-keys/
        name: helm-secrets-private-keys

  applicationSet:
    extraArgs:
      - --loglevel=debug

  redis:
    metrics: *metrics

  notifications:
    metrics: *metrics
    secret:
      create: false

    notifiers:
      service.email.pushover: |
        username: $email-username
        password: $email-password
        host: $email-hostname
        port: 465
        from: $email-from

    triggers:
      trigger.on-deployed: |
        - description: Application is synced and healthy. Triggered once per commit.
          oncePer: app.status.sync.revision
          send:
          - app-deployed
          when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status == 'Healthy'
      trigger.on-health-degraded: |
        - description: Application has degraded
          send:
          - app-health-degraded
          when: app.status.health.status == 'Degraded'
      trigger.on-sync-failed: |
        - description: Application syncing has failed
          send:
          - app-sync-failed
          when: app.status.operationState.phase in ['Error', 'Failed']
      trigger.on-sync-status-unknown: |
        - description: Application status is 'Unknown'
          send:
          - app-sync-status-unknown
          when: app.status.sync.status == 'Unknown'
      defaultTriggers: |
        - on-deployed
        - on-health-degraded
        - on-sync-failed
        - on-sync-status-unknown
    templates:
      template.app-deployed: |
        email:
          subject: New version of an application {{.app.metadata.name}} is up and running.
        message: |
          {{if eq .serviceType "slack"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} is now running new version of deployments manifests.
        github:
          status:
            state: success
            label: "ArgoCD app={{.app.metadata.name}}"
      template.app-health-degraded: |
        email:
          subject: Application {{.app.metadata.name}} has degraded.
        message: |
          {{if eq .serviceType "slack"}}:exclamation:{{end}} Application {{.app.metadata.name}} has degraded.
          {{if ne .serviceType "github"}}Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.{{end}}
        github:
          status:
            state: error
            label: "ArgoCD app={{.app.metadata.name}}"
      template.app-sync-failed: |
        email:
          subject: Failed to sync application {{.app.metadata.name}}.
        message: |
          {{if eq .serviceType "slack"}}:exclamation:{{end}}  The sync operation of application {{.app.metadata.name}} has failed at {{.app.status.operationState.finishedAt}} with the following error: {{.app.status.operationState.message}}
          {{if ne .serviceType "github"}}Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .{{end}}
        github:
          status:
            state: error
            label: "ArgoCD app={{.app.metadata.name}}"
      template.app-sync-status-unknown: |
        email:
          subject: Application {{.app.metadata.name}} sync status is 'Unknown'
        message: |
          {{if eq .serviceType "slack"}}:exclamation:{{end}} Application {{.app.metadata.name}} sync is 'Unknown'.
          Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.
          {{if ne .serviceType "slack"}}
          {{range $c := .app.status.conditions}}
              * {{$c.message}}
          {{end}}
          {{end}}
